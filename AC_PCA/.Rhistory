load("~/AC-PCA/R_package/acPCA/data/data_example4.rda")
names(data_example4)
data_example4$lab
data_example3 <- data_example4
names(data_example3)
save(data_example3, file="~/AC-PCA/R_package/acPCA/data/data_example3.rda")
names(data_example3)
data_example3$Y
1/sqrt(3)
X <- data_example3$X ### the data matrix
data_example3$lab ### the biological conditions
Y <- data_example3$Y ### the confounder matrix
dim(Y)
Y[,1:2]
Y[,1]
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example3$lab)
plot(data_example3$true_pattern[1,], data_example3$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example3$true_pattern[1,])-0.3,
max(data_example3$true_pattern[1,])+0.3) )
text(data_example3$true_pattern[1,], data_example3$true_pattern[2,],
labels = 1:10)
dim(Y)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example2$lab)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
### Gaussian kernel
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=mean(abs(Y)), quiet=T)
mean(abs(Y))
result_cv
Y
mean(abs(Y))
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=0.1, quiet=T)
result_cv
seq(0, 10, 0.05)
seq(0, 10, 0.05)
acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=1, quiet=T)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=0.2, quiet=T)
result_cv
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=2, quiet=T)
result_cv
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result_cv
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data("data_example2")
names(data_example2)
data_example2
gene <- read.delim("~/Documents/openness/gene.txt", header=FALSE, comment.char="#")
View(gene)
gene[1,]
class(gene[1,])
gene <- gene[,8:834]
dim(gene)
gene[1:10,1]
gene[4,1]
i <- 1
tmp <- gene[,i]
tmp[1:10]
tmp <- as.vector(tmp)
tmp[1:10]
tmp[4]=="."
tmp[3]=="."
for (i in 1:827){
tmp <- gene[,i]
tmp <- as.vector(tmp)
tmp[which(tmp==".")] <- 0
tmp <- as.numeric(tmp)
}
open_exp <- c()
for (i in 1:827){
tmp <- gene[,i]
tmp <- as.vector(tmp)
tmp[which(tmp==".")] <- 0
tmp <- as.numeric(tmp)
open_exp <- cbind(open_exp, tmp)
}
dim(open_exp)
open_exp[1,]
max(open_exp)
num <- 20
boxplot(open_exp[,sample(ncol(open_exp), num)])
set.seed(1)
num <- 20
boxplot(open_exp[,sample(ncol(open_exp), num)])
boxplot(log2(open_exp[,sample(ncol(open_exp), num)]+1))
num <- 50
boxplot(log2(open_exp[,sample(ncol(open_exp), num)]+1))
par(mfrow=c(1,2))
num <- 50
boxplot(open_exp[,sample(ncol(open_exp), num)])
boxplot(log2(open_exp[,sample(ncol(open_exp), num)]+1))
set.seed(1)
num <- 50
labs <- sample(ncol(open_exp), num)
par(mfrow=c(1,2))
boxplot(open_exp[,labs])
boxplot(log2(open_exp[,labs]+1))
par(mfrow=c(1,1))
boxplot(log2(open_exp[,labs]+1), ylim=c(0, 5))
open_exp[1,]
open_exp[1:2,]
gene[1,]
open_exp[2,]
tmp <- open_exp[2,]
tmp <- tmp[tmp!=0]
tmp
boxplot(log2(tmp))
boxplot(log210(tmp))
boxplot(log10(tmp))
tmp <- open_exp[2,]
tmp <- tmp[tmp!=0]
boxplot(log10(tmp), y="log10(expression level)", xlab="A1BG-AS1")
tmp <- open_exp[2,]
tmp <- tmp[tmp!=0]
boxplot(log10(tmp), ylab="log10(expression level)", xlab="A1BG-AS1")
cs <- read.csv("~/Documents/GTEx/GTEx_v6p/cs")
cs <- cs[-c(1:2),]
cs_m <- c()
for (i in 1:ncol(cs)){
cs_m <- cbind(cs_m, as.numeric(as.vector(cs[,i])))
}
dim(cs_m)
cs_m[1,]
min(cs_m[cs_m!=0])
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(data_fly_worm)
names(data_fly_worm)
dim(data_fly_worm$data_fly)
data_fly_worm$data_fly[,1]
min)data_fly_worm$data_fly
min(data_fly_worm$data_fly)
data_fly <- data_fly_worm$data_fly
dim(data_fly)
data_worm <- data_fly_worm$data_worm
dim(data_worm)
min(data_fly[data_fly!=0])
min(data_worm[data_worm!=0])
experiment <- read.delim("~/Documents/openness/experiment.txt", header=FALSE, comment.char="#")
View(experiment)
experiment[1,]
which(experiment[,8]=="RNA-seq")
experiment_rnaseq <- experiment[which(experiment[,8]=="RNA-seq"),]
dim(experiment_rnaseq)
experiment_rnaseq[1,]
dim(gene)
gene[1,]
rnaseq_expID <- read.csv("~/Documents/openness/rnaseq_expID.txt", sep="")
View(rnaseq_expID)
class(rnaseq_expID)
rnaseq_expID <- rnaseq_expID[1,]
class(rnaseq_expID)
rnaseq_expID
rnaseq_expID <- read.table("~/Documents/openness/rnaseq_expID.txt", quote="\"", comment.char="")
View(rnaseq_expID)
class(rnaseq_expID)
class(rnaseq_expID[1,])
rnaseq_expID
rnaseq_expID <- rnaseq_expID[1,-c(1:7)]
rnaseq_expID
as.character(rnaseq_expID)
as.character(as.vector(rnaseq_expID))
as.vector(rnaseq_expID)
dim(rnaseq_expID)
as.vector(rnaseq_expID)[1,]
as.character(as.vector(rnaseq_expID)[1,])
class(as.vector(rnaseq_expID)[1,])
matrix(rnaseq_expID)
dim(rnaseq_expID)
rnaseq_expID[1,1,]
rnaseq_expID[1,1]
as.character(rnaseq_expID[1,1])
ncol(rnaseq_expID)
ncol(rnaseq_expID)
as.character(rnaseq_expID[1,2])
as.character(rnaseq_expID[1,3])
as.character(rnaseq_expID[2,1])
rnaseq_expID <- read.table("~/Documents/openness/rnaseq_expID.txt", quote="\"", comment.char="")
rnaseq_expID <- rnaseq_expID[1,-c(1:7)]
# vectorize
rnaseq_expIDv <- c()
for (i in 1:ncol(rnaseq_expID)){
rnaseq_expIDv <- c(rnaseq_expIDv, as.character(rnaseq_expID[1,i]))
}
rnaseq_expIDv
table(rnaseq_expIDv)
length(unique(rnaseq_expIDv))
dim(experiment_rnaseq)
experiment_rnaseq[1,]
experiment_rnaseq[,1]==experiment_rnaseq[,2]
experiment_rnaseq[1:10,4]
experiment_rnaseq[1:10,5]
experiment_rnaseq[1:20,5]
experiment_rnaseq[,1]
experiment_rnaseq[,1]
as.character(experiment_rnaseq[,1])
rnaseq_expIDv
for (i in as.character(experiment_rnaseq[,1])){
if (sum(rnaseq_expIDv==i)){
} else{
print(i)
}
}
dim(open_exp)
open_exp_med <- aaply(open_exp, 2, median)
open_exp_med <- apply(open_exp, 2, median)
open_exp_med
boxplot(open_exp_med)
open_exp_med <- apply(open_exp, 2, median)
open_exp_mean <- apply(open_exp, 2, mean)
open_exp_mean
boxplot(mean)
boxplot(open_exp_mean)
open_exp_log_med <- apply(log2(open_exp+1), 2, median)
open_exp_log_mean <- apply(log2(open_exp+1), 2, mean)
boxplot(open_exp_log_med)
boxplot(open_exp_log_mean)
experiment_rnaseq[,5]
batch <- as.character(experiment_rnaseq[,5])
batch
table(batch)
as.character(experiment_rnaseq[,1])
rnaseq_expIDv
length(unique(rnaseq_expIDv))
labs_exp <- c()
labs_rnaseq <- c()
count <- 1
for (i in as.character(experiment_rnaseq[,1])){
if (sum(rnaseq_expIDv==i)){
labs_rnaseq <- c( labs_rnaseq, which(rnaseq_expIDv==i)  )
labs_exp <- c(labs_exp, count)
} else{
}
count <- count + 1
}
labs_rnaseq
labs_exp
length(labs_exp)
batch
labs_exp
batch[labs_exp]
boxplot(open_exp_med[open_exp_med] ~ batch[labs_exp])
length(labs_rnaseq)
labs_rnaseq
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp])
par(mfrow=c(4,1))
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_mean[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_mean[labs_rnaseq] ~ batch[labs_exp])
par(mfrow=c(2,2))
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_mean[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_mean[labs_rnaseq] ~ batch[labs_exp])
batch[labs_exp]
unique(batch[labs_exp])
table(batch[labs_exp])
par(mfrow=c(2,2))
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp], names=table(batch[labs_exp]))
table(batch[labs_exp])
nsam <- as.numeric(table(batch[labs_exp]))
nsam
experiment_rnaseq[1,]
experiment_rnaseq[,3]
as.character(experiment_rnaseq[,3])
batch[labs_exp]
project <- as.character(experiment_rnaseq[,3])
place <- batch[labs_exp]
nsam <- as.numeric(table(batch[labs_exp]))
# stratified by place
par(mfrow=c(2,2))
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_mean[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_med[labs_rnaseq] ~ batch[labs_exp])
boxplot(open_exp_log_mean[labs_rnaseq] ~ batch[labs_exp])
par(mfrow=c(2,2))
boxplot(open_exp_med[labs_rnaseq] ~ batch[labs_exp], ylab="median")
boxplot(open_exp_mean[labs_rnaseq] ~ batch[labs_exp], ylab="mean")
boxplot(open_exp_log_med[labs_rnaseq] ~ batch[labs_exp], ylab="median(log)")
boxplot(open_exp_log_mean[labs_rnaseq] ~ batch[labs_exp], ylab="mean(log)")
dim(experiment_rnaseq)
project <- as.character(experiment_rnaseq[labs_exp,3])
project
length(project)
source('~/Documents/GTEx/GTEx_v6p/diagnosis.R', echo=TRUE)
par(mfrow=c(2,2))
boxplot(open_exp_med[labs_rnaseq] ~ project, ylab="median")
boxplot(open_exp_mean[labs_rnaseq] ~ project, ylab="mean")
boxplot(open_exp_log_med[labs_rnaseq] ~ project, ylab="median(log)")
boxplot(open_exp_log_mean[labs_rnaseq] ~ project, ylab="mean(log)")
?boxplot
table(project)
table(project)
length(project)
which(project=="ENCODE")
labs_ENCODE <- which(project=="ENCODE")
# Pritchard
labs_Pritchard <- which(project=="Pritchard")
# Roadmap
labs_Roadmap <- which(project=="Roadmap")
length(labs_rnaseq)
open_exp_mean[labs_rnaseq][labs_ENCODE]
labs_ENCODE <- which(project=="ENCODE")
par(mfrow=c(2,2))
boxplot((open_exp_med[labs_rnaseq])[labs_ENCODE] ~ (batch[labs_exp])[labs_ENCODE], ylab="median")
boxplot((open_exp_mean[labs_rnaseq])[labs_ENCODE] ~ (batch[labs_exp])[labs_ENCODE], ylab="mean")
boxplot((open_exp_log_med[labs_rnaseq])[labs_ENCODE] ~ (batch[labs_exp])[labs_ENCODE], ylab="median(log)")
boxplot((open_exp_log_mean[labs_rnaseq])[labs_ENCODE] ~ (batch[labs_exp])[labs_ENCODE], ylab="mean(log)")
labs_ENCODE
labs_ENCODE
table(project)
labs_Pritchard <- which(project=="Pritchard")
par(mfrow=c(2,2))
boxplot((open_exp_med[labs_rnaseq])[labs_Pritchard] ~ (batch[labs_exp])[labs_Pritchard], ylab="median")
boxplot((open_exp_mean[labs_rnaseq])[labs_Pritchard] ~ (batch[labs_exp])[labs_Pritchard], ylab="mean")
boxplot((open_exp_log_med[labs_rnaseq])[labs_Pritchard] ~ (batch[labs_exp])[labs_Pritchard], ylab="median(log)")
boxplot((open_exp_log_mean[labs_rnaseq])[labs_Pritchard] ~ (batch[labs_exp])[labs_Pritchard], ylab="mean(log)")
# Roadmap
labs_Roadmap <- which(project=="Roadmap")
par(mfrow=c(2,2))
boxplot((open_exp_med[labs_rnaseq])[labs_Roadmap] ~ (batch[labs_exp])[labs_Roadmap], ylab="median")
boxplot((open_exp_mean[labs_rnaseq])[labs_Roadmap] ~ (batch[labs_exp])[labs_Roadmap], ylab="mean")
boxplot((open_exp_log_med[labs_rnaseq])[labs_Roadmap] ~ (batch[labs_exp])[labs_Roadmap], ylab="median(log)")
boxplot((open_exp_log_mean[labs_rnaseq])[labs_Roadmap] ~ (batch[labs_exp])[labs_Roadmap], ylab="mean(log)")
pwd
getwd()
setwd("/Users/zhixianglin/AC-PCA/Matlab_code")
data("data_example1")
names(data_example1)
getwd()
library(acPCA)
library(R.matlab)
data("data_example1")
names(data_example1)
writeMat("data_example1.mat", X=data_example1$X, Y=data_example1$Y, lab=data_example1$lab, group=data_example1$group, true_pattern=data_example1$true_pattern)
data("data_example2")
names(data_example2)
data("data_example2")
names(data_example2)
writeMat("data_example2.mat", X=data_example2$X, Y=data_example2$Y, lab=data_example2$lab, true_pattern=data_example2$true_pattern, confound_pattern=data_example2$confound_pattern)
data("data_example3")
names(data_example3)
data("data_example3")
names(data_example3)
writeMat("data_example3.mat", X=data_example3$X, Y=data_example3$Y, lab=data_example3$lab, true_pattern=data_example3$true_pattern)
data("data_example4")
names(data_example4)
data("data_brain_w2")
names(data_brain_w2)
dim(data_brain_w2$Y)
data_brain_w2$Y[,1]
data("data_brain_w2")
names(data_brain_w2)
writeMat("data_brain_w2.mat", X=data_brain_w2$X, Y=data_brain_w2$Y,
Yid=data_brain_w2$Yid, regions=data_brain_w2$regions, hemispheres=data_brain_w2$hemispheres,
donor_labs=data_brain_w2$donor_labs)
data("data_brain_w5")
names(data_brain_w5)
data("data_brain_w5")
names(data_brain_w5)
writeMat("data_brain_w5.mat", X=data_brain_w5$X, Y=data_brain_w5$Y,
regions=data_brain_w5$regions, hemispheres=data_brain_w5$hemispheres,
donor_labs=data_brain_w5$donor_labs)
data("data_fly_worm")
names(data_fly_worm)
data("data_fly_worm")
names(data_fly_worm)
writeMat("data_fly_worm.mat",
data_fly=data_fly_worm$data_fly,
data_worm=data_fly_worm$data_worm,
fly_time=data_fly_worm$fly_time,
worm_time=data_fly_worm$worm_time,
X=data_fly_worm$X,
Y=data_fly_worm$Y,
X_time=data_fly_worm$X_time,
X_species=data_fly_worm$X_species,
fly_gene=data_fly_worm$fly_gene
)
dim(open_exp)
rnaseq_expID[1:10]
which(rnaseq_expIDv=="SNERE0000COO")
which(rnaseq_expIDv=="SNERP0018909")
which(rnaseq_expIDv=="SNEDP0018909")
which(rnaseq_expIDv=="SNEDE0000EMJ")
HumanMatch <- read.delim("~/Documents/openness/HumanMatch.txt", header=FALSE)
View(HumanMatch)
HumanMatch <- read.delim("~/Documents/openness/HumanMatch.txt", header=FALSE)
View(HumanMatch)
dim(HumanMatch)
HumanMatch[1,]
HumanMatch[,2]
as.vector(HumanMatch[,2])
rnaseq_expIDvM <- as.vector(HumanMatch[,2])
rnaseq_expIDvM[1:10]
length(rnaseq_expIDv)
dim(open_exp)
HumanMatch <- read.delim("~/Documents/openness/HumanMatch.txt", header=FALSE)
# the RNA-Seq samples
rnaseq_expIDvM <- as.vector(HumanMatch[,2])
rnaseq_expIDvM［1:5
rnaseq_expIDvM[1:10]
length(unique(c(rnaseq_expIDvM, rnaseq_expIDv)))
experiment_rnaseq[1,]
experiment_rnaseq[,11]
experiment_rnaseq[1:3,]
length(rnaseq_expIDvM)
length(rnaseq_expIDv)
rnaseq_expIDvM[1:10]
experiment_rnaseq[,1]
rnaseq_expIDvM[1:10]
length(rnaseq_expIDvM)
length(rnaseq_expIDv)
as.vector(experiment_rnaseq[,1])
labM <- c()
labMexp <- c()
for (i in rnaseq_expIDvM){
labM <- c(labM, which(rnaseq_expIDv==i))
labMexp <- c(labMexp, which(as.vector(experiment_rnaseq[,1])==i))
}
length(labM)
labM
labMexp
length(labMexp)
experiment_rnaseq[1:3,]
rnaseq_expIDvM[1:10]
rnaseq_expIDv[1:10]
length(rnaseq_expIDvM)
length(rnaseq_expIDvM)
length(rnaseq_expIDvM)
length(rnaseq_expIDv)
as.vector(experiment_rnaseq[,1])
as.vector(experiment_rnaseq[,1])
HumanMatch <- read.delim("~/Documents/openness/HumanMatch.txt", header=FALSE)
# the RNA-Seq samples
rnaseq_expIDvM <- as.vector(HumanMatch[,2])
length(unique(c(rnaseq_expIDvM, rnaseq_expIDv))) # all included
labM <- rep(-1, length(rnaseq_expIDvM))
labMexp <- rep(-1, length(rnaseq_expIDvM))
for (i in 1:length(rnaseq_expIDvM)){
id <- rnaseq_expIDvM[i]
if (sum(rnaseq_expIDv==id)){
labM[i] <- which(rnaseq_expIDv==id)
}
if (sum(as.vector(experiment_rnaseq[,1])==id)){
labMexp[i] <- which(as.vector(experiment_rnaseq[,1])==id)
}
}
labM
labMexp
rnaseq_expIDv
rnaseq_expIDvM
labMexp
labM
dim(open_exp)
which(labMexp!=-1)
labM[which(labMexp!=-1)]
labM[which(labMexp!=-1)]
open_expM <- open_exp[,labM[which(labMexp!=-1)]]
labMexp
dim(experiment_rnaseq)
labMexp[which(labMexp!=-1)]
open_expM <- open_exp[,labM[which(labMexp!=-1)]]
experiment_rnaseqM <- experiment_rnaseq[labMexp[which(labMexp!=-1)],]
dim(open_expM)
dim(experiment_rnaseqM)
experiment_rnaseqM[1:3,]
experiment_rnaseqM[,3]
experiment_rnaseqM[,4]
experiment_rnaseqM[,5]
experiment_rnaseqM[,13]
experiment_rnaseqM[,12]
experiment_rnaseqM[1:5,]
experiment_rnaseqM[1:5,]
experiment_rnaseqM[,11]
experiment_rnaseqM[,13]
data(data_example1)
names(data_example1)
data(data_example2)
names(data_example2)
data_example2$Y
data(data_example3)
names(data_example3)
dim(data_example3$Y)
data_example3$Y[,1]
